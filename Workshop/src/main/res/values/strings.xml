<resources>
    <string name="app_name">Delightful Apps With Material Design</string>
    <string name="action_settings">Settings</string>
    <string name="more">Show More</string>
    <string name="less">Show Less</string>
    <string name="seams_title">Seams</string>
    <string name="steps_title">Steps</string>
    <string name="seams_demo_description">
        <![CDATA[
        <ul>
        <li>Two sheets of paper that share an entire common edge are called seams.</li>
        <li>Here in this demo, there are two sheets of paper.Both are at same elevation and are one below another, sharing a common edge. <li>
        <li>Sheets of paper joined together by a seam move together. In this case both sheets scroll together. </li>
        </ul>
         ]]></string>
    <string name="seam_fab_description">A floating action button can straddle a seam</string>
    <string name="steps_demo_description_top_sheet">
        <![CDATA[
        <ul>
        <li>Two overlapping sheets of paper with different depths form a step.</li>
        <li>Here in this demo, there are two sheets of paper. Both are at different elevations. The white sheet has an elevation greater than the gray sheet and you can notice the shadow cast by white paper.<li>
        <li>Overlapping sheets of paper can move independently of each other.</li>
        </ul>
         ]]></string>
    <string name="steps_demo_description_bottom_sheet">
        <![CDATA[
        <ul>
        <li>A floating action button can straddle a step like the FAB beside.</li>
        <li>Here in this demo, the top sheet can be swiped right.<li>
        <li>You will notice that the bottom sheet moves up responding to swipe of the top sheet giving an effect a sheet sliding below the top.</li>
        <li>You can bring back top sheet by clicking on the FAB.<li>
        </ul>
         ]]></string>
    <string name="demo_buttons">Buttons Demo</string>
    <string name="title_floating">Floating Action Button</string>
    <string name="title_raised_button">Raised Button</string>
    <string name="title_borderless_button">Flat Button</string>
    <string name="borderless_button_description">
        <![CDATA[
        <ul>
        <li>A rectangular material button that has no elevation and displays ripple reaction on press.</li>
        <li>Use them in elevated layouts to avoid excessive layering.<li>
        </ul>
         ]]></string>
    <string name="raised_button_description">
        <![CDATA[
        <ul>
        <li>A rectangular material button that has an elevation and displays ripple reaction on press.</li>
        <li>Use them in flat layouts to emphasize actions.<li>
        <li>Easy background tinting support.<li>
        </ul>
         ]]></string>
    <string name="fab_description">
        <![CDATA[
        <ul>
        <li>A circular material button that has an elevation and displays ripple reaction on press.</li>
        <li>Its the most important and ubiquitous action on the screen.<li>
        <li>Easy background tinting support.<li>
        </ul>
         ]]></string>
    <string name="lorem_paragraph">Mauris dictum ligula justo, quis semper nunc sodales quis. Duis finibus dictum elit, nec volutpat est blandit ac. Aliquam in pellentesque tortor, et dignissim turpis. Nullam imperdiet dolor id quam convallis, a luctus nibh placerat. Sed dignissim facilisis dolor, vitae lacinia ex volutpat ac. Nulla ut suscipit massa. Suspendisse at enim in eros sagittis consequat.  \n\nNunc nisl eros, hendrerit in sem quis, varius luctus nibh. Nam ultrices diam id est placerat suscipit ac quis quam. Vivamus elementum posuere leo quis aliquet. Sed ut augue non metus facilisis sodales. Nam finibus vulputate neque sed tempor. Ut rhoncus orci in lacinia accumsan. Sed facilisis viverra nibh, nec ultricies libero accumsan ac. Cras efficitur neque at ipsum bibendum, vel pellentesque elit tempus. Aenean hendrerit ullamcorper luctus. Phasellus sagittis purus libero, quis scelerisque dui lobortis in. Nam luctus ultrices convallis. Fusce vel libero lorem. Phasellus eget ante quis elit rutrum ornare. Phasellus blandit porttitor magna, quis placerat neque porttitor quis.  Quisque non lacinia ipsum. Fusce lacus justo, euismod quis pretium vitae, lobortis quis lacus. Nunc orci nisi, vehicula at elit eu, aliquet viverra elit. Proin vitae mi sit amet ipsum dapibus dapibus non rhoncus ex. Morbi in gravida nulla, feugiat aliquam est.</string>
    <string name="title_fab_controls">Fab Controls</string>
    <string name="make_a_snack">Type in something and make a snack!</string>
    <string name="with_action">With action</string>
    <string name="a_button">This is a button in a card.</string>
    <string name="cl_anchors_description"><![CDATA[
        <ul>
        <li>You can anchor views to another view which is a child of coordinator view.</li>
        <li>An anchored child may not contain another anchor child.<li>
        <li>Usually used to position floating content.<li>
        <li>An anchored view gets pinned. When a nested scrolling container is scrolled, anchored view maintains its gravity.<li>
        <li>Click on any of the + button to anchor the FAB.<li>
        </ul>
         ]]></string>

    <string name="cl_existing_behavior_description"><![CDATA[
        <ul>
        <li>AppBarLayout has a default behavior to interpret nested scroll and respond to it. When a nested scroll or fling happens it will update layout its children based on the scroll flags.</li>
        <li>In this demo when you scroll, the toolbar scrolls and snaps. When you scroll down it follows a quick return pattern.<li>
        <li>AppBarLayout also provides a behavior class to position views below it. NestedScrollView has that behavior.<li>
        <li>AppBarLayouts default behavior interprets nested scroll event passed to it via parent coordinator layout. Depending on the scroll and fling amount, it will offset the layout position of AppBarLayout.<li>
        <li>ScrollingViewBehavior of the appbar layout then responds to layout changes of appbar and repositions itself to the bottom of newly laid out appbar.<li>
        <li>FloatingActionButton has a default behavior to respond to AppBarLayout changes and Snackbar.<li>
        </ul>
         ]]></string>

    <string name="cl_swipe_dismiss_behavior"><![CDATA[
        <ul>
        <li>SwipeDismissBehavior can be added to any direct descendants of Coordinator Layout.</li>
        <li>Use the buttons below to add and remove swipe behaviors.<li>
        </ul>
         ]]></string>
</resources>
